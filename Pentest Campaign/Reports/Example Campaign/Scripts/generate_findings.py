#!/usr/bin/env python3
"""
Generate finding stubs from Nmap (-oX) XML or Nessus (.nessus) export.
Creates Markdown stubs under 06-Reporting/Findings/ with consistent frontmatter.
Stdlib only.
"""
import argparse
import os
import re
import xml.etree.ElementTree as ET
from pathlib import Path

SEVERITY_MAP = {
    # Nessus numeric to text
    '0': 'Info',
    '1': 'Low',
    '2': 'Medium',
    '3': 'High',
    '4': 'Critical',
}

def sanitize_name(s: str) -> str:
    s = re.sub(r"[^A-Za-z0-9._-]+", "-", s.strip())
    return re.sub(r"-+", "-", s).strip("-")

def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)

def write_finding(out_dir: Path, title: str, severity: str, affected: str, reference: str):
    ensure_dir(out_dir)
    base = f"Finding_{sanitize_name(title)[:80]}"
    fname = base + ".md"
    path = out_dir / fname
    i = 1
    while path.exists():
        path = out_dir / f"{base}_{i}.md"
        i += 1
    body = f"""---
title: "{title}"
type: finding
severity: {severity}
affected: "{affected}"
reference: "{reference}"
status: open
cssclass: cs-note
---

# {title}

## Summary
Short description and impact.

## Technical Details
- Evidence and details here.

## Reproduction Steps
1. 

## Remediation
Actionable fix.

## References
{reference}
"""
    path.write_text(body, encoding="utf-8")
    print(f"Wrote finding: {path}")
    return path

def parse_nmap(xml_path: Path, findings_dir: Path):
    root = ET.parse(xml_path).getroot()
    print(f"root tag: {root.tag}")
    count = 0
    for host in root.iter("host"):
        addr = host.find("address")
        ip = addr.get("addr") if addr is not None else "unknown"
        for port in host.iter("port"):
            state = port.find("state")
            if state is not None and state.get("state") not in (None, "open"):
                continue
            portid = port.get("portid")
            proto = port.get("protocol")
            svc = port.find("service")
            sname = svc.get("name") if svc is not None else "service"
            product = svc.get("product") if svc is not None and svc.get("product") else ""
            version = svc.get("version") if svc is not None and svc.get("version") else ""
            title = f"{sname} on {ip}:{portid}/{proto}"
            if product or version:
                title = f"{title} - {product} {version}".strip()
            affected = f"{ip}:{portid}/{proto}"
            reference = "Nmap service/version; review for known vulns"
            write_finding(findings_dir, title, "Low", affected, reference)
            count += 1
    print(f"parse_nmap: wrote {count} findings")

def parse_nessus(nessus_path: Path, findings_dir: Path, min_sev: int = 1):
    # min_sev: 0 Info, 1 Low, 2 Medium, 3 High, 4 Critical
    root = ET.parse(nessus_path).getroot()
    for report in root.findall("Report"):
        for host in report.findall("ReportHost"):
            ip = host.get("name", "host")
            for item in host.findall("ReportItem"):
                sev = int(item.get("severity", "0"))
                if sev < min_sev:
                    continue
                port = item.get("port", "")
                svc = item.get("svc_name", "")
                plugin = item.get("pluginID", "")
                cve = item.get("cve", "") or (item.findtext("cve") or "").strip()
                name = item.get("pluginName") or item.findtext("pluginName") or "Nessus Finding"
                severity = SEVERITY_MAP.get(str(sev), "Low")
                affected = f"{ip}:{port} {svc}".strip()
                ref = f"Plugin {plugin} {('â€¢ ' + cve) if cve else ''}"
                write_finding(findings_dir, name, severity, affected, ref)

def main():
    ap = argparse.ArgumentParser(description="Generate finding stubs from scan outputs")
    ap.add_argument("--type", choices=["nmap", "nessus"], required=True)
    ap.add_argument("--input", required=True, help="Path to Nmap XML or Nessus .nessus file")
    ap.add_argument("--campaign", required=True, help="Path to campaign root (folder containing 06-Reporting)")
    ap.add_argument("--min-severity", type=int, default=1, help="Nessus min severity 0-4 (default 1=Low)")
    args = ap.parse_args()

    campaign = Path(args.campaign)
    findings_dir = campaign / "06-Reporting" / "Findings"
    ensure_dir(findings_dir)

    if args.type == "nmap":
        parse_nmap(Path(args.input), findings_dir)
    else:
        parse_nessus(Path(args.input), findings_dir, args.min_severity)

    print(f"Findings written to: {findings_dir}")

if __name__ == "__main__":
    main()
