param(
  [string]$CampaignRoot = "..\"
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Is-NmapXml([string]$Path) {
  try {
    $xml = [xml](Get-Content -Raw -LiteralPath $Path)
    return $xml.DocumentElement.Name -eq 'nmaprun'
  } catch { return $false }
}

function Is-Nessus([string]$Path) {
  try {
    $xml = [xml](Get-Content -Raw -LiteralPath $Path)
    return $xml.DocumentElement.Name -eq 'NessusClientData_v2'
  } catch { return $false }
}

$root = (Resolve-Path $CampaignRoot).Path
$recon = Join-Path $root '02-Recon/scans'
$enum = Join-Path $root '03-Enumeration/scans'
$targets = @($recon, $enum) | Where-Object { Test-Path $_ }

$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$genPy = Join-Path $scriptDir 'generate_findings.py'
$venvPy = Join-Path $scriptDir '.venv/Scripts/python.exe'
if (-not (Test-Path $genPy)) { throw "Missing generator: $genPy" }

function Resolve-PythonExe {
  if (Test-Path $venvPy) { return $venvPy }
  if (Get-Command python -ErrorAction SilentlyContinue) { return 'python' }
  if (Get-Command py -ErrorAction SilentlyContinue) { return 'py' }
  throw 'Python not found; install 3.8+'
}
$pyExe = Resolve-PythonExe

# Registry of processed scan file hashes
$registryPath = Join-Path $root '06-Reporting/Findings/.generated_from_scans.json'
if (Test-Path $registryPath) {
  try {
    $obj = Get-Content -Raw -LiteralPath $registryPath | ConvertFrom-Json
    if ($obj -is [pscustomobject]) {
      $registry = @{}
      foreach ($prop in $obj.PSObject.Properties) { $registry[$prop.Name] = $prop.Value }
    } else {
      $registry = @{}
    }
  } catch { $registry = @{} }
} else { $registry = @{} }

foreach ($dir in $targets) {
  Get-ChildItem -File $dir -Recurse | ForEach-Object {
    $p = $_.FullName
    $hash = (Get-FileHash -Algorithm SHA256 -LiteralPath $p).Hash
    if ($registry.ContainsKey($hash)) {
      Write-Host "Skipping already processed: $($p)" -ForegroundColor Yellow
      return
    }
    if ($p -like '*.nessus') {
      $args = @($genPy, '--type', 'nessus', '--input', $p, '--campaign', $root, '--min-severity', 1)
      if ($pyExe -eq 'py') { $args = @('-3') + $args }
      & $pyExe @args
      $registry[$hash] = @{ type = 'nessus'; path = $p; processed = (Get-Date).ToString('s') }
    } elseif ($p -like '*.xml') {
      if (Is-NmapXml -Path $p) {
        $args = @($genPy, '--type', 'nmap', '--input', $p, '--campaign', $root)
        if ($pyExe -eq 'py') { $args = @('-3') + $args }
        & $pyExe @args
        $registry[$hash] = @{ type = 'nmap'; path = $p; processed = (Get-Date).ToString('s') }
      }
    }
  }
}

# Save registry
New-Item -ItemType Directory -Force -Path (Split-Path -Parent $registryPath) | Out-Null
$registry | ConvertTo-Json -Depth 5 | Set-Content -LiteralPath $registryPath -Encoding UTF8
